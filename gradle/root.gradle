/*
 * root.gradle
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2015-2018 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.security.MessageDigest

/**
 * Build configuration specially for the root project only.
 */

apply plugin: 'project-reports'
//apply plugin: 'release'

htmlDependencyReport {
    projects = project.allprojects
}
dependencyReport {
    projects = project.allprojects
}

def generateMD5(File file) {
    def digest = MessageDigest.getInstance("MD5")
    file.withInputStream() { is ->
        byte[] buffer = new byte[8192]
        int read = 0
        while ((read = is.read(buffer)) > 0) {
            digest.update(buffer, 0, read);
        }
    }
    byte[] md5sum = digest.digest()
    BigInteger bigInt = new BigInteger(1, md5sum)
    bigInt.toString(16).padLeft(32, '0')
}

task checksumsVerify {

    doLast {
        def checksumsFile = file('.checksum')
        def failed = []
        checksumsFile.eachLine { line ->
            if (line.startsWith("#")) { return }
            def parts = line.split('\\s+')
            def name = parts[0]
            def checksum = parts[1]
            def md5 = generateMD5(file(name))
            if (!md5.equalsIgnoreCase(checksum)) {
                failed.add(name)
            }

        }
        if (!failed.empty) {
            throw new RuntimeException("Some MD5 sums failed to verify: " + failed)
        }
    }
}
